# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `set` gem.
# Please instead update this file by running `bin/tapioca gem set`.

# typed: true

class Set
  include ::Enumerable

  def initialize(enum = T.unsafe(nil), &block); end

  def &(enum); end
  def +(enum); end
  def -(enum); end
  def <(set); end
  def <<(o); end
  def <=(set); end
  def <=>(set); end
  def ==(other); end
  def ===(o); end
  def >(set); end
  def >=(set); end
  def ^(enum); end
  def add(o); end
  def add?(o); end
  def classify; end
  def clear; end
  def collect!; end
  def compare_by_identity; end
  def compare_by_identity?; end
  def delete(o); end
  def delete?(o); end
  def delete_if; end
  def difference(enum); end
  def disjoint?(set); end
  def divide(&func); end
  def each(&block); end
  def empty?; end
  def eql?(o); end
  def filter!(&block); end
  def flatten; end
  def flatten!; end
  def freeze; end
  def hash; end
  def include?(o); end
  def inspect; end
  def intersect?(set); end
  def intersection(enum); end
  def join(separator = T.unsafe(nil)); end
  def keep_if; end
  def length; end
  def map!; end
  def member?(o); end
  def merge(enum); end
  def pretty_print(pp); end
  def pretty_print_cycle(pp); end
  def proper_subset?(set); end
  def proper_superset?(set); end
  def reject!(&block); end
  def replace(enum); end
  def reset; end
  def select!(&block); end
  def size; end
  def subset?(set); end
  def subtract(enum); end
  def superset?(set); end
  def to_a; end
  def to_s; end
  def to_set(klass = T.unsafe(nil), *args, &block); end
  def union(enum); end
  def |(enum); end

  protected

  def flatten_merge(set, seen = T.unsafe(nil)); end

  private

  def do_with_enum(enum, &block); end
  def initialize_clone(orig, **options); end
  def initialize_dup(orig); end

  class << self
    def [](*ary); end
  end
end

Set::InspectKey = T.let(T.unsafe(nil), Symbol)
